// Level 1
// Рассчитайте Big (O) задачи про составление наибольшего числа из чисел в массиве.

function largestNumber(nums) {
    const compareNumbers = (a, b) => {
      const digitA = Math.floor(Math.log10(a)) + 1;
      const digitB = Math.floor(Math.log10(b)) + 1;
      const num1 = a * Math.pow(10, digitB) + b;
      const num2 = b * Math.pow(10, digitA) + a;
      return num2 - num1;
    };
    const sortedNums = nums.sort(compareNumbers);
    let result = 0;
    for (let i = 0; i < sortedNums.length; i++) {
      result = result * 10 + sortedNums[i];
    }
    return result;
  }
  const nums = [30, 2, 9, 5, 50];
  console.log(largestNumber(nums));

// временная сложность  O(n*log(n))


// Примером из повседневной жизни, где можно применить жадный алгоритм, может быть задача о выборе оптимального маршрута для доставки по разным адресам с минимальными затратами на топливо.

// Предположим, есть машина с определенным запасом топлива, и необходимо доставить несколько посылок к разным адресам. Каждый адрес имеет свою дальность от начальной точки и требует определенное количество топлива для доставки. Нужно выбрать такой маршрут, чтобы доставить все посылки и потратить минимальное количество топлива.

// В такой ситуации можно применить жадный алгоритм следующим образом:

// Рассчитать соотношение "расстояние / топливо" для каждого адреса. Это позволит определить, как далеко можно проехать на единицу топлива для каждого адреса.
// Отсортировать адреса в порядке убывания этого соотношения. Это позволит выбрать адреса с наибольшим значением "расстояние / топливо" в первую очередь.
// Начиная с самого выгодного адреса, доставлять посылки, пока есть достаточное количество топлива для доставки на следующий адрес. При этом обновлять оставшийся запас топлива и переходить к следующему адресу.
// Продолжать этот процесс до тех пор, пока все посылки не будут доставлены.
// Жадный алгоритм здесь поможет оптимизировать использование топлива, так как мы выбираем адреса с наибольшим значением "расстояние / топливо" в первую очередь, что позволяет доставлять больше посылок на единицу топлива. Это пример применения жадного алгоритма для решения задачи оптимального маршрута доставки с минимальными затратами.


// Level 2
// Предположим, у вас есть рюкзак вместимостью 10 кг и список предметов, 
// которые вы можете положить в рюкзак. Каждый предмет имеет свой вес и стоимость:
// Предмет
// Вес (кг)
// Стоимость ($)
// 1
// 2
// 10
// 2
// 3
// 15
// 3
// 5
// 25
// 4
// 7
// 35
// Вам нужно выбрать такой набор предметов, чтобы их суммарный вес не превышал 10 кг, 
// а суммарная стоимость была максимальной.

// Решение задачи о рюкзаке с помощью жадного алгоритма заключается в следующих шагах:
// Вычисляем "ценность" каждого предмета, разделив его стоимость на вес.
// Сортируем предметы в порядке убывания их ценности.
// Идем по отсортированному списку предметов и добавляем их в рюкзак, начиная с самых ценных, 
// пока не достигнем максимальной вместимости рюкзака.


function backpack(items, capacity) {
  items.forEach((item) => {
    item.value = item.cost / item.weight;
  });

  items.sort((a, b) => b.value - a.value);

  let totalWeight = 0;
  let totalValue = 0;
  let selectedItems = [];

  items.forEach((item) => {
    if (totalWeight + item.weight <= capacity) {
      selectedItems.push(item.item);
      totalWeight += item.weight;
      totalValue += item.cost;
    }
  });

  return {
    selectedItems: selectedItems,
    totalWeight: totalWeight,
    totalValue: totalValue,
  };
}

const items = [
  { item: 1, weight: 2, cost: 10 },
  { item: 2, weight: 3, cost: 15 },
  { item: 3, weight: 5, cost: 25 },
  { item: 4, weight: 7, cost: 35 },
];
const capacity = 10;

const result = backpack(items, capacity);
console.log("Выбранные предметы:", result.selectedItems);
console.log("Суммарный вес:", result.totalWeight);
console.log("Суммарная стоимость:", result.totalValue);
